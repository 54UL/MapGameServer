namespace tf {

/** @page chapter4 Conditional Tasking

Parallel workloads often require making control-flow decisions across dependent tasks.
%Taskflow supports an very efficient interface of conditional tasking
for users to implement general control flow such as dynamic flow, cycles, and conditionals 
that are otherwise difficult to do with existing frameworks.

@tableofcontents

@section C4_CreateAConditionTask Create a Condition Task

A condition task evalutes a set of instructions and returns an integer index of the next immediate successor to execute. 
The index is defined with respect to the order of its successor construction.

@code{.cpp}
 1: tf::Taskflow taskflow;
 2: 
 3: tf::Task init = taskflow.emplace([](){}).name("init");
 4: tf::Task stop = taskflow.emplace([](){}).name("stop");
 5:
 6: // creates a condition task that returns 0 or 1
 7: tf::Task cond = taskflow.emplace([](){
 8: std::cout << "flipping a coin\n";
 9:  return std::rand() % 2;
10: }).name("cond");
11:
12: // creates a feedback loop {0: cond, 1: stop}
13: init.precede(cond);
14: cond.precede(cond, stop);  // returns 0 to 'cond' or 1 to 'stop'
15:
16: executor.run(taskflow).wait();
@endcode

<!-- @image html images/conditional-tasking-1.svg width=45% -->
@dotfile images/conditional-tasking-1.dot

The example above implements a simple yet commonly used feedback loop through
a condition task (line 7-10) that returns
a random binary value.
If the return value from @c cond is @c 0, it loops back to itself, 
or otherwise to @c stop. 
Our conditional tasking interface is very neat and expressive.
A complex flow control often just takes a few lines of code to implement.
The code below creates another taskflow with three condition tasks.

@code{.cpp}
tf::Taskflow taskflow;

tf::Task A = taskflow.emplace([](){}).name("A");
tf::Task B = taskflow.emplace([](){}).name("B");
tf::Task C = taskflow.emplace([](){}).name("C");
tf::Task D = taskflow.emplace([](){}).name("D");
tf::Task E = taskflow.emplace([](){}).name("E");
tf::Task F = taskflow.emplace([](){}).name("F");
tf::Task G = taskflow.emplace([](){}).name("G");
tf::Task H = taskflow.emplace([](){}).name("H");
tf::Task I = taskflow.emplace([](){}).name("I");
tf::Task K = taskflow.emplace([](){}).name("K");
tf::Task L = taskflow.emplace([](){}).name("L");
tf::Task M = taskflow.emplace([](){}).name("M");
tf::Task cond_1 = taskflow.emplace([](){ return std::rand()%2; }).name("cond_1");
tf::Task cond_2 = taskflow.emplace([](){ return std::rand()%2; }).name("cond_2");
tf::Task cond_3 = taskflow.emplace([](){ return std::rand()%2; }).name("cond_3");

A.precede(B, F);
B.precede(C);
C.precede(D);
D.precede(cond_1);
E.precede(K);
F.precede(cond_2);
H.precede(I);
I.precede(cond_3);
L.precede(M);

cond_1.precede(B, E);       // return 0 to 'B' or 1 to 'E'
cond_2.precede(G, H);       // return 0 to 'G' or 1 to 'H'
cond_3.precede(cond_3, L);  // return 0 to 'cond_3' or 1 to 'L'

taskflow.dump(std::cout);
@endcode

The above code creates three condition tasks:
(1) a condition task @c cond_1 that loops back 
to @c B on returning @c 0, or proceeds to @c E on returning @c 1,
(2) a condition task @c cond_2 that goes to @c G on returning @c 0,
or @c H on returning @c 1,
(3) a condition task @c cond_3 that loops back to itself on returning @c 0, 
or proceeds to @c L on returning @c 1

<!-- @image html images/conditional-tasking-2.svg width=100% -->
@dotfile images/conditional-tasking-2.dot

You can use condition tasks to create cycles as long as the graph does not introduce task race during execution. However, cycles are not allowed in non-condition tasks.

@section C4_TaskSchedulingPolicy Understand our Task-level Scheduling

In order to understand how an executor schedules condition tasks,
we define two dependency types,
<em>strong dependency</em> and <em>weak dependency</em>.
A strong dependency is a preceding link from a non-condition task to 
another task.
A weak dependency is a preceding link from a condition task to
another task. 
The number of dependents of a task is the sum of strong dependency 
and weak dependency.
The table below lists the strong dependency and
weak dependency numbers of each task in the previous example.

<div align="center">
| task   | strong dependency | weak dependency | dependents |
| :-:    | :-:               | :-:             |            |
| A      | 0                 | 0               | 0          |
| B      | 1                 | 1               | 2          |
| C      | 1                 | 0               | 1          |
| D      | 1                 | 0               | 1          |
| E      | 0                 | 1               | 1          |
| F      | 1                 | 0               | 1          |
| G      | 0                 | 1               | 1          |
| H      | 0                 | 1               | 1          |
| I      | 1                 | 0               | 1          |
| K      | 1                 | 0               | 1          |
| L      | 0                 | 1               | 1          | 
| M      | 1                 | 0               | 1          |
| cond_1 | 1                 | 0               | 1          |
| cond_2 | 1                 | 0               | 1          |
| cond_3 | 1                 | 1               | 2          |
</div>

You can query the number of strong dependents,
the number of weak dependents,
and the number of dependents of a task.

@code{.cpp}
 1: tf::Taskflow taskflow;
 2: 
 3: tf::Task task = taskflow.emplace([](){});
 4: 
 5: // ... add more tasks and preceding links
 6:
 7: std::cout << task.num_dependents() << '\n';
 8: std::cout << task.num_strong_dependents() << '\n'; 
 9: std::cout << task.num_weak_dependents() << '\n';
@endcode

When you submit a task to an executor,
the scheduler starts with tasks of <em>zero dependents</em>
(both zero strong and weak dependencies)
and continues to execute successive tasks whenever 
their <em>strong dependencies</em> are met.
However, the scheduler skips this rule when executing a condition task
and jumps directly to its successors indexed by the return value.

<!-- @image html images/conditional-tasking-rules.svg width=100% -->
@dotfile images/task_level_scheduling.dot

Each task has an @em atomic join counter to keep track of strong dependents
that are met at runtime.
When a task completes,
the join counter is restored to the task's strong dependency number 
in the graph, such that the subsequent execution can reuse the counter again.

@subsection TaskLevelSchedulingExample Example

Let's take a look at an example to understand how task-level scheduling
works. Suppose we have the following taskflow of one condition task @c cond
that forms a loop to itself on returning @c 0 and moves on to @c stop on
returning @c 1:

@dotfile images/conditional-tasking-1.dot

The scheduler starts with @c init task because it has no dependencies 
(both strong and weak dependencies).
Then, the scheduler moves on to the condition task @c cond.
If @c cond returns @c 0, the scheduler enqueues @c cond and runs it again.
If @c cond returns @c 1, the scheduler enqueues @c stop and then moves on.


@section C4_AvoidCommonPitfalls Avoid Common Pitfalls

Condition tasks are handy in creasing dynamic and cyclic control flows,
but they are also easy to make mistakes.
It is your responsibility to ensure a taskflow is properly conditioned. 
Top things to avoid include <em>no source tasks</em> to start with 
and <em>task race</em>. 
The figure below shows common pitfalls and their remedies. 

<!-- @image html images/conditional-tasking-pitfalls.svg  width=100% -->
@dotfile images/conditional-tasking-pitfalls.dot

In the @c error1 scenario,
there is no source task for the scheduler to start with,
and the simplest fix is to add a task @c S that has no dependents.
In the @c error2 scenario,
@c D might be scheduled twice by @c E through the strong dependency 
and @c C through the weak dependency (on returning @c 1).
To fix this problem, you can add an auxiliary task @c D-aux to break
the mixed use of strong dependency and weak dependency.
In the risky scenario, task @c X may be raced by @c M and @c P if @c M
returns @c 0 and P returns @c 1.

@attention
It is your responsibility to ensure a written taskflow graph is properly
conditioned.
We suggest that you @ref C4_TaskSchedulingPolicy and infer if task race
exists in the execution of your graph.

*/

}

